/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Controller.ClientesController;
import Model.Clientes;
import View.Renderers.StatusCellRenderer;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ariel
 */
public class TelaHome extends javax.swing.JFrame {

    /**
     * Creates new form TelaHome
     */
    private final ClientesController controller;

    public TelaHome() {
        telaHomeInstance = this;
        initComponents();
        controller = new ClientesController();
        carregarClientes();
    }

    private void carregarClientes() {
        configurarTabela();

        List<Clientes> clientes = controller.listarClientes();
        DefaultTableModel model = (DefaultTableModel) tableTelaInicial.getModel();
        model.setRowCount(0);

        for (Clientes cliente : clientes) {
            model.addRow(new Object[]{
                cliente.getId(),
                cliente.getNome(),
                obterNomeStatus(cliente.getIdStatus())
            });
        }
    }

    private void abrirTelaGerenciarClientes() {
        TelaGerenciarClientes telaGerenciarClientes = new TelaGerenciarClientes();
        telaGerenciarClientes.setVisible(true);
    }

    private void pesquisarCliente() {
        try {
            String nome = JOptionPane.showInputDialog(this, "Digite o nome do cliente:", "Pesquisar Cliente", JOptionPane.QUESTION_MESSAGE);

            if (nome != null && !nome.isEmpty()) {
                List<Clientes> listaClientes = controller.pesquisarClientePorNome(nome);

                if (listaClientes.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Nenhum cliente encontrado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    DefaultTableModel model = (DefaultTableModel) tableTelaInicial.getModel();
                    model.setRowCount(0);
                    for (Clientes cliente : listaClientes) {
                        model.addRow(new Object[]{
                            cliente.getId(), cliente.getNome(), obterNomeStatus(cliente.getIdStatus())
                        });
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao pesquisar cliente: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String obterNomeStatus(int idStatus) {
        switch (idStatus) {
            case 0:
                return "Negativado";
            case 1:
                return "CDL";
            case 2:
                return "Pequenas Causas";
            case 3:
                return "Acordo";
            default:
                return "Desconhecido";
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tableTelaInicial = new javax.swing.JTable();
        btGerenciarClientes = new javax.swing.JButton();
        btStatusCliente = new javax.swing.JButton();
        btPesquisaCliente = new javax.swing.JButton();
        btPesquisaCliente1 = new javax.swing.JButton();
        btRelatorio = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableTelaInicial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null
                }},
                new String [] {
                    "Código", "Cliente", "Status"
                }
            ){
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Impede a edição das células
                }
            }
        );
        DefaultTableModel model = (DefaultTableModel) tableTelaInicial.getModel();
        model.addRow(new Object[]{"001", "Ariel", "Ativo"});
        tableTelaInicial.setShowGrid(true);
        tableTelaInicial.setVerifyInputWhenFocusTarget(false);
        jScrollPane2.setViewportView(tableTelaInicial);

        btGerenciarClientes.setText("Gerenciar Clientes");
        btGerenciarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGerenciarClientesActionPerformed(evt);
            }
        });

        btStatusCliente.setText("Status");
        btStatusCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStatusClienteActionPerformed(evt);
            }
        });

        btPesquisaCliente.setText("Pesquisar Cliente");
        btPesquisaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisaClienteActionPerformed(evt);
            }
        });

        btPesquisaCliente1.setText("Gerenciar Parcelas");
        btPesquisaCliente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisaCliente1ActionPerformed(evt);
            }
        });

        btRelatorio.setText("Relatório");
        btRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRelatorioActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btGerenciarClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btStatusCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btPesquisaCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btPesquisaCliente1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btRelatorio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btGerenciarClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btPesquisaCliente1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btStatusCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btPesquisaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btGerenciarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGerenciarClientesActionPerformed
        TelaGerenciarClientes telaGerenciarClientes = new TelaGerenciarClientes();
        telaGerenciarClientes.setVisible(true);
        telaGerenciarClientes.setLocationRelativeTo(this);
    }//GEN-LAST:event_btGerenciarClientesActionPerformed

    private void btPesquisaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisaClienteActionPerformed
        try {

            String nome = JOptionPane.showInputDialog(this, "Digite o nome do cliente:",
                    "Pesquisar Cliente", JOptionPane.QUESTION_MESSAGE);

            if (nome != null && !nome.trim().isEmpty()) {
                List<Clientes> listaClientes = controller.pesquisarClientePorNome(nome);

                if (listaClientes.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Nenhum cliente encontrado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    DefaultTableModel model = (DefaultTableModel) tableTelaInicial.getModel();
                    model.setRowCount(0);
                    for (Clientes cliente : listaClientes) {
                        model.addRow(new Object[]{
                            cliente.getId(),
                            cliente.getNome(),
                            obterNomeStatus(cliente.getIdStatus())
                        });
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao pesquisar cliente: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btPesquisaClienteActionPerformed

    private void btStatusClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStatusClienteActionPerformed
        try {
            int selectedRow = tableTelaInicial.getSelectedRow();

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Por favor, selecione um cliente na tabela.", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int clienteId = (int) tableTelaInicial.getValueAt(selectedRow, 0);

            Clientes cliente = controller.buscarClientePorId(clienteId);

            if (cliente == null) {
                JOptionPane.showMessageDialog(this, "Cliente não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            TelaObservacao telaObservacao = new TelaObservacao(
                    cliente.getId(),
                    cliente.getObservacao(),
                    obterNomeStatus(cliente.getIdStatus())
            );
            telaObservacao.setVisible(true);
            telaObservacao.setLocationRelativeTo(this);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao abrir observação: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btStatusClienteActionPerformed

    private void btPesquisaCliente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisaCliente1ActionPerformed
        try {
            int selectedRow = tableTelaInicial.getSelectedRow();

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Por favor, selecione um cliente na tabela.", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int clienteId = (int) tableTelaInicial.getValueAt(selectedRow, 0);

            TelaGerenciaParcelas telaGerenciarParcelas = new TelaGerenciaParcelas(clienteId);
            telaGerenciarParcelas.setVisible(true);
            telaGerenciarParcelas.setLocationRelativeTo(this);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao abrir a tela de Gerenciar Parcelas: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btPesquisaCliente1ActionPerformed

    private void btRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRelatorioActionPerformed
        TelaRelatorio telaRelatorio = new TelaRelatorio();
        telaRelatorio.setVisible(true);
        telaRelatorio.setLocationRelativeTo(this);
    }//GEN-LAST:event_btRelatorioActionPerformed

    private void configurarTabela() {
        tableTelaInicial.setModel(new DefaultTableModel(
                new Object[][]{},
                new String[]{"Código", "Cliente", "Status"}
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });

        tableTelaInicial.getColumnModel().getColumn(2).setCellRenderer(new StatusCellRenderer());
    }

    public void atualizarTabela() {
        try {
            ClientesController clientesController = new ClientesController();
            List<Clientes> clientesList = clientesController.listarClientes();

            DefaultTableModel model = (DefaultTableModel) tableTelaInicial.getModel();
            model.setRowCount(0);

            for (Clientes cliente : clientesList) {
                model.addRow(new Object[]{
                    cliente.getId(),
                    cliente.getNome(),
                    cliente.getIdStatus() == 0 ? "Negativado"
                    : cliente.getIdStatus() == 1 ? "CDL"
                    : cliente.getIdStatus() == 2 ? "Pequenas Causas" : "Acordo"
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao atualizar tabela!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaHome().setVisible(true);
            }
        });
    }
    public static TelaHome telaHomeInstance;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btGerenciarClientes;
    private javax.swing.JButton btPesquisaCliente;
    private javax.swing.JButton btPesquisaCliente1;
    private javax.swing.JButton btRelatorio;
    private javax.swing.JButton btStatusCliente;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableTelaInicial;
    // End of variables declaration//GEN-END:variables
}
